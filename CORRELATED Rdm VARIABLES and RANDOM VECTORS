# Code for my entry on the post:
# http://stats.stackexchange.com/questions/149321/generating-and-working-with-random-vectors-in-r/149460#149460
# Creating bivariate random vectors with specified correlation between elements
# and different marginal distributions:

# We decide on a correlation between the elements of the random vector,
# and set it up in a correlation matrix, C:

C <- matrix(c(1,0.4,0.4,1), nrow = 2)

set.seed(0)

require(mvtnorm)

# Create a bivariate random vector with elements correlated according to C
# and following a standard normal distribution:

SN <- rmvnorm(mean = c(0,0), sig = C, n = 1e5)

sd(SN[,1])
sd(SN[,2])
mean(SN[,1])
mean(SN[,2])
SN[1:2,]
cor(SN[,1],SN[,2])

SN1 <- SN[,1]
SN2 <- SN[,2]

library(RColorBrewer)

par(mfrow=c(1,1))

smoothScatter(SN1, SN2,
              colramp = 
                colorRampPalette(c("white","orange","yellow")))
abline(lm(SN[,2]~SN[,1]),col='firebrick',lwd=2)

# Now we apply F^-1 or the inverse of erf function to the generated data,
# and we'll end up with a data distributed as U(0,1)

U <- pnorm(SN)
cor(U[,1], U[,2])

U1 <- U[,1]
U2 <- U[,2]

# We now create a plot with histograms at the margins - uniform looking:

layout(matrix(c(2,0,1,3),2,2,byrow=TRUE), widths=c(3,1), heights=c(1,3), TRUE)

par(mar=c(5.1,4.1,0.1,0))
plot(U1,U2,col="tan",pch=19,cex=0.2)
abline(lm(U[,2]~U[,1]),col='black',lwd=3)

par(mar=c(0,4.1,3,0))
hist(U[,1],ann=FALSE,axes=FALSE,col="darkgray",border="white")

yhist <- hist(U[,2],plot=FALSE)

par(mar=c(5.1,0,0.1,1))
barplot(yhist$density,horiz=TRUE,space=0,axes=FALSE,col="darkgray",border="white")


# We look now for the quantile for each point in the data, and utilizing the 
# CDF of whatever distribution we want:

X1 <- qt(U[,1], df = 3)
X2 <- qexp(U[,2], rate = 1)
cor(X1,X2)

#Plotting

dev.off()
par(mfrow=c(1,2))
hist(X1,freq = F,col="firebrick",border="white",xlim=c(-20,20), ylim=c(0,0.4),breaks=200)
lines(density(X1),lwd=4,col='orange')
hist(X2,freq = F,col="firebrick",border="white",xlim=c(0,7), breaks=20)
lines(density(X1),lwd=4,col='orange')

# We can also just do the same with plain vanilla Normal, although with different
# means and variances:

X1 <- qnorm(U[,1], mean = 3,sd = 4.47)
X2 <- qnorm(U[,2], mean = -5, sd = 4.47)
cor(X1,X2)
